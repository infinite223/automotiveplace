generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id               String   @id @default(cuid())
  title            String
  content          String?
  published        Boolean  @default(false)
  authorId         String?
  projectId        String?
  carItemId        String?
  spotId           String?
  companyId        String?
  isBlockedByAdmin Boolean?
  reportId         String?
  imagesUrl        String?
  isProblem        Boolean?
  likes            Like[]
  author           User?    @relation(fields: [authorId], references: [id])
  company          Company? @relation(fields: [companyId], references: [id])
  tags             Tag[]
  media            Media[]  
}

model Project {
  id                          String                       @id @default(cuid())
  createdAt                   DateTime                     @default(now()) @map("created_at")
  updatedAt                   DateTime                     @updatedAt @map("updated_at")
  name                        String?
  carMake                     String
  carModel                    String
  description                 String?
  isVerified                  Boolean
  isVisible                   Boolean
  imagesUrl                   String
  carItemsCount               Int
  imagesCount                 Int
  forSell                     Boolean
  garageId                    String
  projectPrice                Decimal
  engineName                  String
  engineStockHp               Int
  engineStockNm               Int
  engineDescription           String?
  engineCapacity              Decimal
  engineWasSwapped            Boolean?
  transmissionName            String
  transmissionGears           Int
  transmissionDescription     String?
  transmissionWasSwapped      Boolean?
  authorId                    String
  companyId                   String?
  isBlockedByAdmin            Boolean?
  reportId                    String?
  topSpeedStock               Decimal?
  transmissionType            Int
  weightStock                 Decimal?
  carItems                    CarItem[]
  likes                       Like[]
  location                    Location?
  pickedProjectsOnEventOrSpot PickedProjectOnEventOrSpot[]
  author                      User                         @relation(fields: [authorId], references: [id])
  company                     Company?                     @relation(fields: [companyId], references: [id])
  garage                      Garage                       @relation(fields: [garageId], references: [id])
  stages                      Stage[]
  tags                        Tag[]
  media                       Media[]                      
}

model Media {
  id            String   @id @default(cuid())
  fileName      String
  fileLocation  String
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  projectId     String?
  postId        String?
  project       Project? @relation(fields: [projectId], references: [id])
  post          Post?    @relation(fields: [postId], references: [id])
}

model User {
  id                         String                       @id @default(cuid())
  password                   String
  name                       String                       @unique
  email                      String?                      @unique
  createdAt                  DateTime                     @default(now()) @map("created_at")
  updatedAt                  DateTime                     @updatedAt @map("updated_at")
  companyId                  String?
  isBlockedByAdmin           Boolean?
  reportId                   String?
  suggestedContentModel      String?
  carItems                   CarItem[]
  garage                     Garage?
  likes                      Like[]
  pickedProjectOnEventOrSpot PickedProjectOnEventOrSpot[]
  posts                      Post[]
  projects                   Project[]
  reports                    Report[]
  createdStages              Stage[]
  tags                       Tag[]
  userActivity               UserActivity[]
  company                    Company?                     @relation(fields: [companyId], references: [id])

  @@map("users")
}

model UserActivity {
  id           String            @id @default(cuid())
  userId       String
  activityType ActivityType
  entityId     String
  entityType   EntityType
  createdAt    DateTime          @default(now())
  user         User              @relation(fields: [userId], references: [id])
  tags         Tag[]             @relation("TagUserActivities")
  TagUserActivity TagUserActivity[]
}

model Company {
  id               String    @id @default(cuid())
  name             String
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  authorId         String
  isBlockedByAdmin Boolean?
  reportId         String?
  imagesUrl        String?
  carItems         CarItem[]
  garage           Garage?
  location         Location?
  posts            Post[]
  projects         Project[]
  tags             Tag[]
  users            User[]
}

model Garage {
  id               String    @id @default(cuid())
  name             String
  description      String
  authorId         String    @unique
  garageId         String?   @unique
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  companyId        String?   @unique
  isBlockedByAdmin Boolean?
  reportId         String?
  carItems         CarItem[]
  author           User      @relation(fields: [authorId], references: [id])
  company          Company?  @relation(fields: [companyId], references: [id])
  projects         Project[]
}

model Spot {
  id                         String                       @id @default(cuid())
  name                       String
  description                String?
  createdAt                  DateTime                     @default(now()) @map("created_at")
  updatedAt                  DateTime                     @updatedAt @map("updated_at")
  authorId                   String
  isBlockedByAdmin           Boolean?
  reportId                   String?
  location                   Location?
  pickedProjectOnEventOrSpot PickedProjectOnEventOrSpot[]
}

model Event {
  id                         String                       @id @default(cuid())
  name                       String
  description                String?
  createdAt                  DateTime                     @default(now()) @map("created_at")
  updatedAt                  DateTime                     @updatedAt @map("updated_at")
  authorId                   String
  isBlockedByAdmin           Boolean?
  reportId                   String?
  imagesUrl                  String
  location                   Location?
  pickedProjectOnEventOrSpot PickedProjectOnEventOrSpot[]
}

model PickedProjectOnEventOrSpot {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  projectId        String?
  userId           String
  eventId          String?
  spotId           String?
  isBlockedByAdmin Boolean?
  reportId         String?
  event            Event?   @relation(fields: [eventId], references: [id])
  project          Project? @relation(fields: [projectId], references: [id])
  spot             Spot?    @relation(fields: [spotId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
}

model Stage {
  id               String    @id @default(cuid())
  name             String
  description      String?
  stageNumber      Int
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  hp               Int
  nm               Int
  acc_0_100        Decimal?
  acc_100_200      Decimal?
  acc_50_150       Decimal?
  sl_150_50        Decimal?
  sl_100_0         Decimal?
  projectId        String
  createdById      String?
  stagePrice       Decimal?
  chartImageUrl    String?
  isBlockedByAdmin Boolean?
  reportId         String?
  topSpeed         Decimal?
  weight           Decimal?
  carItems         CarItem[]
  createdBy        User?     @relation(fields: [createdById], references: [id])
  project          Project   @relation(fields: [projectId], references: [id])
}

model Tag {
  id               String         @id @default(cuid())
  name             String
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  authorId         String
  projectId        String?
  carItemId        String?
  companyId        String?
  isBlockedByAdmin Boolean?
  reportId         String?
  postId           String?
  author           User           @relation(fields: [authorId], references: [id])
  carItem          CarItem?       @relation(fields: [carItemId], references: [id])
  company          Company?       @relation(fields: [companyId], references: [id])
  post             Post?          @relation(fields: [postId], references: [id])
  project          Project?       @relation(fields: [projectId], references: [id])
  userActivities   UserActivity[] @relation("TagUserActivities")
  TagUserActivity  TagUserActivity[]
}

model TagUserActivity {
  tagId          String
  userActivityId String
  tag            Tag            @relation(fields: [tagId], references: [id])
  userActivity   UserActivity   @relation(fields: [userActivityId], references: [id])

  @@id([tagId, userActivityId])
}

model CarItem {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  forSell          Boolean
  isVisible        Boolean
  inUse            Boolean
  name             String
  description      String
  itemType         String
  carItemPrice     Decimal?
  projectId        String
  authorId         String
  garageId         String?
  stageId          String?
  companyId        String?
  isBlockedByAdmin Boolean?
  reportId         String?
  author           User     @relation(fields: [authorId], references: [id])
  company          Company? @relation(fields: [companyId], references: [id])
  garage           Garage?  @relation(fields: [garageId], references: [id])
  project          Project  @relation(fields: [projectId], references: [id])
  stage            Stage?   @relation(fields: [stageId], references: [id])
  likes            Like[]
  tags             Tag[]
}

model Report {
  id              String   @id @default(cuid())
  userId          String
  createdAt       DateTime @default(now()) @map("created_at")
  name            String
  description     String
  appeal          String?
  reportType      String
  reportElementId String
  author          User     @relation(fields: [userId], references: [id])
}

model Like {
  id           String       @id @default(cuid())
  userId       String
  likeableId   String
  likeableType LikeableType
  createdAt    DateTime     @default(now()) @map("created_at")
  carItemId    String?
  projectId    String?
  postId       String?
  carItem      CarItem?     @relation(fields: [carItemId], references: [id])
  post         Post?        @relation(fields: [postId], references: [id])
  project      Project?     @relation(fields: [projectId], references: [id])
  author       User         @relation(fields: [userId], references: [id])

  @@index([likeableId, likeableType], map: "likeable_index")
}

model Location {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  name        String
  description String
  lat         Decimal
  lng         Decimal
  projectId   String?  @unique
  companyId   String?  @unique
  spotId      String?  @unique
  eventId     String?  @unique
  company     Company? @relation(fields: [companyId], references: [id])
  spot        Spot?    @relation(fields: [eventId], references: [id])
  project     Project? @relation(fields: [projectId], references: [id])
  event       Event?   @relation(fields: [spotId], references: [id])
}

enum ActivityType {
  VIEW
  LIKE
  COMMENT
  CREATE
}

enum EntityType {
  POST
  PROJECT
  CARITEM
  EVENT
  SPOT
}

enum LikeableType {
  POST
  PROJECT
  CARITEM
  SPOT
  COMPANY
}