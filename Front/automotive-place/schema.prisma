generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?

  projectId String?
  carItemId String?
  spotId String?

  author User? @relation(fields: [authorId], references: [id])
}

model User {
  id        String   @id @default(cuid())
  password  String
  name      String
  email     String?  @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  // type? company itp
  posts        Post[]
  garage       Garage?
  projects     Project[]
  carItems     CarItem[]
  carItemLikes CarItemLikes[]
  projectLikes ProjectLikes[]
  createdStages      Stage[]
  tags        Tag[]

  @@map(name: "users")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  posts        Post[]
  garage       Garage?
  projects     Project[]
  carItems     CarItem[]

  tags        Tag[]

  @@map(name: "users")
}

model Garage {
  id          String   @id @default(cuid())
  name        String
  description String
  authorId    String   @unique
  garageId    String?   @unique
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  companyId String? @unique
  carItems    CarItem[]
  projects Project[]

  author   User    @relation(fields: [authorId], references: [id])
  company  Company?  @relation(fields: [companyId], references: [id])
}

model Project {
  id String @id @default(cuid())

  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
  carMake       String
  carModel      String
  description   String?
  isVerified    Boolean
  isVisible     Boolean
  imagesUrl     String // folder localisation by id  
  imagesCount   Int
  likesCount    Int
  carItemsCount Int
  forSell       Boolean
  stagesCount   Int
  garageId      String
  projectPrice  Decimal?

  engineName      String
  engineStockHp        Int
  engineStockNm    Int
  engineDescription String?
  engineWasSwapped   Boolean?

  transmissionName String
  transmissionGears Int
  transmissionDescription String?
  transmissionWasSwapped Boolean?

  carItems CarItem[]
  stages Stage[]
  likes    ProjectLikes[]
  tags Tag[]
  authorId String
  companyId String?

  author User    @relation(fields: [authorId], references: [id])
  garage Garage? @relation(fields: [garageId], references: [id])
  company Company? @relation(fields: [companyId], references: [id])
}

model Stage {
  id String     @id @default(cuid())

  name          String
  description   String?
  stageNumber   Int
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
  hp            Int
  nm            Int
  acc_0_100     Decimal?
  acc_100_200   Decimal?
  acc_50_150    Decimal?

  sl_150_50     Decimal? // droga hamowania w metrach
  sl_100_0      Decimal?
  projectId     String
  createdById   String?
  stagePrice    Decimal?
  chartImageUrl String?    

  carItems CarItem[]
  project Project? @relation(fields: [projectId], references: [id])
  createdBy User? @relation(fields: [createdById], references: [id])
  // author User    @relation(fields: [authorId], references: [id]) //company?
}

model Tag {
  id String     @id @default(cuid())

  name          String
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
  authorId      String
  projectId     String?
  carItemId     String? 
  companyId     String? 

  author    User     @relation(fields: [authorId], references: [id])
  project   Project?  @relation(fields: [projectId], references: [id])
  company   Company?  @relation(fields: [companyId], references: [id])
  carItem   CarItem?   @relation(fields: [carItemId], references: [id])
}

model CarItem {
  id String @id @default(cuid())

  createdAt   DateTime       @default(now()) @map(name: "created_at")
  updatedAt   DateTime       @updatedAt @map(name: "updated_at")
  forSell     Boolean
  isVisible   Boolean
  inUse       Boolean
  likesCount  Int
  name        String
  description String
  itemType    String
  carItemPrice  Decimal?
  likes       CarItemLikes[]
  tags        Tag[]

  projectId   String
  authorId    String
  garageId    String?
  stageId     String?
  companyId   String?

  author    User     @relation(fields: [authorId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])
  garage   Garage? @relation(fields: [garageId], references: [id])
  stage     Stage? @relation(fields: [stageId], references: [id])
  company   Company? @relation(fields: [companyId], references: [id])
}

model ProjectLikes {
  id        String @id @default(cuid())
  projectId String
  authorId  String

  author  User     @relation(fields: [authorId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
}

model CarItemLikes {
  id        String @id @default(cuid())
  carItemId String
  authorId  String

  author  User     @relation(fields: [authorId], references: [id])
  carItem CarItem? @relation(fields: [carItemId], references: [id])
}
