generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?

  projectId String?
  carItemId String? // TODO - remove THIS
  spotId String?// TODO - remove THIS
  companyId String? // TODO - remove THIS
  likes    Like[]

  author User? @relation(fields: [authorId], references: [id])
  company  Company?  @relation(fields: [companyId], references: [id])

  isBlockedByAdmin Boolean?
  reportId    String?
}

model User {
  id        String   @id @default(cuid())
  password  String
  name      String   @unique
  email     String?  @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  // type? company itp
  posts        Post[]
  garage       Garage?
  projects     Project[]
  carItems     CarItem[]
  createdStages      Stage[]
  likes       Like[]
  tags        Tag[]
  pickedProjectOnEventOrSpot PickedProjectOnEventOrSpot[]
  reports    Report[]
  suggestedContentModel     String? // model tworzący proponowane treści
  companyId   String?
  company  Company?  @relation(fields: [companyId], references: [id])

  @@map(name: "users")

  isBlockedByAdmin Boolean?
  reportId    String?
}

model Company {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  // TODO - dane firmy, nip, regon itp

  posts        Post[]
  garage       Garage?
  projects     Project[]
  carItems     CarItem[]
  tags        Tag[]
  users       User[] // osoby należące do firmy 
  authorId      String // Twórca firmy w aplikacji
  location Location?

  isBlockedByAdmin Boolean?
  reportId    String?
}

model Garage {
  id          String   @id @default(cuid())
  name        String
  description String
  authorId    String   @unique
  garageId    String?   @unique
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  companyId String? @unique
  carItems    CarItem[]
  projects Project[]

  author   User    @relation(fields: [authorId], references: [id])
  company  Company?  @relation(fields: [companyId], references: [id])

  isBlockedByAdmin Boolean?
  reportId    String?
}

model Project {
  id String @id @default(cuid())

  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
  name          String?
  carMake       String
  carModel      String
  description   String?
  isVerified    Boolean
  isVisible     Boolean
  imagesUrl     String // folder localisation by id  
  carItemsCount Int // user can expand car items
  imagesCount   Int // user can expand images 
  forSell       Boolean
  garageId      String
  projectPrice  Decimal

  engineName      String
  engineStockHp        Int
  engineStockNm    Int
  engineDescription String?
  engineCapacity Decimal
  engineWasSwapped   Boolean?

  transmissionName String
  transmissionType Int // type -> 0 - maual | 1 - automat
  transmissionGears Int
  transmissionDescription String?
  transmissionWasSwapped Boolean?

  topSpeedStock Decimal?
  weightStock   Decimal?

  carItems CarItem[]
  stages Stage[]
  likes    Like[]
  pickedProjectsOnEventOrSpot PickedProjectOnEventOrSpot[]
  tags Tag[]
  authorId String
  companyId String?
  location Location?

  author User    @relation(fields: [authorId], references: [id])
  garage Garage? @relation(fields: [garageId], references: [id])
  company Company? @relation(fields: [companyId], references: [id])

  isBlockedByAdmin Boolean?
  reportId    String?
}

model Spot {
  id String     @id @default(cuid())

  name          String
  description   String?
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
  
  authorId String
  pickedProjectOnEventOrSpot PickedProjectOnEventOrSpot[]
  location Location?

  isBlockedByAdmin Boolean?
  reportId    String?
}

model Event {
  id String     @id @default(cuid())

  name          String
  description   String?
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  authorId String
  pickedProjectOnEventOrSpot PickedProjectOnEventOrSpot[]
  location Location?

  isBlockedByAdmin Boolean?
  reportId    String?
}

model PickedProjectOnEventOrSpot {
  id String     @id @default(cuid())
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  projectId     String?
  userId        String

  eventId       String?
  spotId        String?

  project Project? @relation(fields: [projectId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  event Event? @relation(fields: [eventId], references: [id])
  spot Spot? @relation(fields: [spotId], references: [id])

  isBlockedByAdmin Boolean?
  reportId    String?
}

model Stage {
  id String     @id @default(cuid())

  name          String
  description   String?
  stageNumber   Int
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
  hp            Int
  nm            Int
  acc_0_100     Decimal?
  acc_100_200   Decimal?
  acc_50_150    Decimal?

  sl_150_50     Decimal? // droga hamowania w metrach
  sl_100_0      Decimal?
  topSpeed Decimal?
  weight   Decimal?

  projectId     String
  createdById   String?
  stagePrice    Decimal?
  chartImageUrl String?    

  carItems CarItem[]
  project Project? @relation(fields: [projectId], references: [id])
  createdBy User? @relation(fields: [createdById], references: [id]) 

  isBlockedByAdmin Boolean?
  reportId    String?
}

model Tag {
  id String     @id @default(cuid())

  name          String
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
  authorId      String
  projectId     String?
  carItemId     String? 
  companyId     String? 

  author    User     @relation(fields: [authorId], references: [id])
  project   Project?  @relation(fields: [projectId], references: [id])
  company   Company?  @relation(fields: [companyId], references: [id])
  carItem   CarItem?   @relation(fields: [carItemId], references: [id])

  isBlockedByAdmin Boolean?
  reportId    String?
}

model CarItem {
  id String @id @default(cuid())

  createdAt   DateTime       @default(now()) @map(name: "created_at")
  updatedAt   DateTime       @updatedAt @map(name: "updated_at")
  forSell     Boolean
  isVisible   Boolean
  inUse       Boolean
  name        String
  description String
  itemType    String
  carItemPrice  Decimal?
  likes       Like[]
  tags        Tag[]

  projectId   String
  authorId    String
  garageId    String?
  stageId     String?
  companyId   String?

  author    User     @relation(fields: [authorId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])
  garage   Garage? @relation(fields: [garageId], references: [id])
  stage     Stage? @relation(fields: [stageId], references: [id])
  company   Company? @relation(fields: [companyId], references: [id])

  isBlockedByAdmin Boolean?
  reportId    String?
}

model Report {
  id           String   @id @default(cuid())
  userId       String
  createdAt    DateTime @default(now()) @map(name: "created_at")
  name         String
  description  String 
  appeal       String? // Wypełnia użytkownik który utworzył daną rzecz (spot, element, projekt)

  reportType   String
  reportElementId String 
  author         User     @relation(fields: [userId], references: [id])
}

model Like {
  id           String   @id @default(cuid())
  userId       String
  likeableId   String
  likeableType LikeableType
  createdAt    DateTime @default(now()) @map(name: "created_at")
 
  carItemId    String?
  projectId    String?
  postId       String?

  author         User     @relation(fields: [userId], references: [id])
  post         Post?    @relation(fields: [postId], references: [id])
  project      Project? @relation(fields: [projectId], references: [id])
  carItem      CarItem? @relation(fields: [carItemId], references: [id])

  @@index([likeableId, likeableType], name: "likeable_index")
}

model Location {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now()) @map(name: "created_at")
  name         String   // nazwa miejsca - np. miejscowość
  description  String   // dodatkowe informacje - np. kod pocztowy, ulica, budynek 
  lat          Decimal
  lng          Decimal
  projectId    String?  @unique
  companyId    String?  @unique
  spotId       String?  @unique
  eventId      String?  @unique
   
  
  project      Project? @relation(fields: [projectId], references: [id])
  company      Company? @relation(fields: [companyId], references: [id])
  event        Event? @relation(fields: [spotId], references: [id])
  spot        Spot? @relation(fields: [eventId], references: [id])
}

// TODO - cały osobny model czatu 
// Chats -> Messages

// miejsca (osobna tabela)-> gdzie można spotkać dany projekt, gdzie jest firma itp 


enum LikeableType {
  POST
  PROJECT
  CARITEM
  SPOT
  COMPANY
}

// generator erd {
//   provider = "prisma-erd-generator"
// }